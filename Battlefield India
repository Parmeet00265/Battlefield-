using UnityEngine;
using Photon.Pun;

public class BattleRoyaleGame : MonoBehaviourPunCallbacks
{
    // Player Variables
    public float moveSpeed = 5f;
    public float jumpForce = 5f;
    public float rotationSpeed = 700f;
    public float maxHealth = 100f;

    // Shooting Variables
    public GameObject bulletPrefab;
    public Transform firePoint;
    public float bulletSpeed = 20f;

    // Multiplayer
    private Rigidbody rb;
    private bool isGrounded = true;
    private float currentHealth;
    private PhotonView photonView;

    void Start()
    {
        // Initialize Player
        rb = GetComponent<Rigidbody>();
        photonView = GetComponent<PhotonView>();
        currentHealth = maxHealth;

        if (!photonView.IsMine)
        {
            Destroy(GetComponentInChildren<Camera>()); // Disable other players' cameras
        }
    }

    void Update()
    {
        if (photonView.IsMine)
        {
            HandleMovement();
            HandleShooting();
        }
    }

    void HandleMovement()
    {
        // Player movement
        float moveX = Input.GetAxis("Horizontal");
        float moveZ = Input.GetAxis("Vertical");
        Vector3 move = transform.right * moveX + transform.forward * moveZ;
        rb.MovePosition(rb.position + move * moveSpeed * Time.deltaTime);

        // Player rotation
        float mouseX = Input.GetAxis("Mouse X") * rotationSpeed * Time.deltaTime;
        transform.Rotate(0, mouseX, 0);

        // Jump
        if (Input.GetButtonDown("Jump") && isGrounded)
        {
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
        }
    }

    void HandleShooting()
    {
        if (Input.GetButtonDown("Fire1")) // Left mouse button
        {
            photonView.RPC("Shoot", RpcTarget.All);
        }
    }

    [PunRPC]
    void Shoot()
    {
        GameObject bullet = Instantiate(bulletPrefab, firePoint.position, firePoint.rotation);
        Rigidbody rb = bullet.GetComponent<Rigidbody>();
        rb.velocity = firePoint.forward * bulletSpeed;
        Destroy(bullet, 5f); // Destroy bullet after 5 seconds
    }

    void OnCollisionStay(Collision collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            isGrounded = true;
        }
    }

    void OnCollisionExit(Collision collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            isGrounded = false;
        }
    }

    [PunRPC]
    public void TakeDamage(float amount)
    {
        currentHealth -= amount;
        if (currentHealth <= 0)
        {
            Die();
        }
    }

    void Die()
    {
        if (photonView.IsMine)
        {
            PhotonNetwork.Destroy(gameObject); // Destroy the player object
        }
    }
}
